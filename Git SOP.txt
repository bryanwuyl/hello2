///////////Git setup///////////
==========STEP 1 : 最初步工作
在你安裝 Git 後首先應該做的事是設定使用者名稱及電子郵件
    $ git config --global user.name "John Doe"
    $ git config --global user.email johndoe@example.com
檢查讀者的設定
    $ git config --list
想要在 Windows 系統上使用 Notepad++ 做為編輯器
    $ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
產生ssh key
    $ ssh-keygen                //會產生公鑰及私鑰；pubkey需上傳至github作為個人帳號憑證，否則無法push/pull
                                  完成ssh key生成後，可透過顯示路徑找到此public key所存放之位置
    $ cat ~/.ssh/id_rsa.pub     //由此查看公鑰內容，或由資料夾查看亦可


==========STEP 2 : 分辨詞
    repository      倉儲(repo)
    track           開始及停止追蹤檔案
    stage           暫存區(add to staged)
    commit          提交修改的內容送到目前的分支上(版本庫)
    push            將更新推送
    push -f         將更新強制推送
    pull            從遠端倉儲拉取
    HEAD            當前分支中的最新提交節點
    HEAD~ (HEAD^)   當前分支中的前一版節點
    HEAD~2          當前分支中的前兩版節點
    
==========STEP 3 : clone (repo)
    **be added into repo         //提供github給管理者，收到邀請通知後完成接受
    **add new folder             //建立欲指定的資料夾，並由此開啟git bash
    $ git clone [ssh link]       //完成接收後，可於github中看到該repo，複製ssh連結並下指令在git上
    **clone complete             //完成clone。此後可在本地修改檔案，並依步驟push至hub上
    
    $ git status                 //可以讓我們觀看目前的 repo
    $ git add .                  //預存，增加檔案
    $ git commit -m 'xxxx'       //進行提交, -m 後面輸入的內容是本次修改 ( 送出 ) 的說明, 盡量輸入一眼就可以看出這次送出修改了什麼的內容 ( 方便以後回去觀看能快速了解此次 commit 修改了什麼 )
    $ git commit                 //進行提交，這時會跳出編輯視窗，輸入完先按 Esc鍵 ，按完後底下的 INSERT 會消失，接著直接打 :wq ，再按 enter 就會儲存並離開了。
    $ git commit --amend         //編輯你上一次的 commit 內容
    $ git push
    $ git log                    //版本紀錄，按小寫q 可退出
    $ git log --pretty=oneline   //版本紀錄一次一行
	$ git log --pretty=oneline <file>
	                             //針對某特定版本的log檔
    
==========STEP 4 : 建立repo
    $ git init                   //這個命令將會建立一個名為 .git 的子資料夾，其中包含 Git 所有必需的倉儲檔案
    $ git status                 //可以讓我們觀看目前的 repo
    $ git add .                  //預存，把現有的檔案都預存到該repo
    $ git commit -m "xxxx"       //提交
    $ git commit                 //提交
    **開啟github
    **新增repo                   //Your repository\new\ *<Repository name> *<Private> \Create repository
    **複製remote指令             //from …or create a new repository on the command line
                                   ex. git remote add origin https://github.com/bryanwuyl/test1.git
    $ git remote                 //打開始新增的資料夾，打開git bash，把剛才於github repo中複製的remote指令貼上
    $ git push orgin master      //完成push


==========STEP 5 : 刪除檔案
    **透過windows刪除檔案
    $ git add .                  //預存，把現有的檔案都預存到該repo
    $ git commit -m "xxxx"       //提交
    
    **git方式刪除
    $ git rm hello.txt           //將文件從本地及暫存區同時刪除
    $ git commit -m "xxxx"       //提交
    

==========STEP 6 : 誤刪檔案或回復版本
                                 //未透過add存入暫存區(stage)，使用restore
    $ git restore .\hello.txt    //檔案會回到修改前的版本，無論是修改或刪除

                                 //未透過add存入暫存區(stage)
    $ git check out .            //檔案會回到本地
	    
                                 //檔案已add進暫存區(無論有無push至hub上)
    $ git log                    //找到要回復的版本號。每個log commit後方的流水號即是版本號ID
    $ git revert -n xxxx         //將版本回復到要回復的版本號
    $ git status                 //非必要。查看目前git的狀態
    $ git add .                  //預存，把現有的檔案都預存到該repo
    $ git commit -m "xxxx"       //提交
    $ git push
    
    $ git reset HEAD^            //回推到上一個版本，後續需再將檔案add回至暫存區
    $ git reflog                 //可檢視所有工作log
    
    
==========STEP 7 : 查看工作區、暫存區、本地間差異
    $ git diff                   //比較本地區與暫存區內容差異    
    $ git diff HEAD^             //比較本地區與版本庫內容差異
    $ git diff --cached          //比較暫存區與版本庫內容差異
    $ git diff IDx1 IDx2         //比較兩個版本的內容差異
    $ git diff IDx1 HEAD         //比較ID版本與當前版本的內容差異
    $ git diff HEAD~ HEAD        //比較前一版本與當前版本的內容差異
    $ git diff HEAD^ hello.txt   //只會查看特定檔案的內容差異
    
==========STEP 8 : 分支
    $ git branch                 //檢索目前所有分支。帶星號為目前分支所在地
    $ git branch dev             //創建dev分支
    $ git switch dev             //將目前分支所在處移至dev
    **在分支所在處新增檔案         //echo dev1 > dev1.txt (需在dev分支下建立檔案)
    $ git add .                  //預存，把現有的檔案都預存到該repo
    $ git commit -m "xxxx"       //提交。新增之檔案即掛至該分支下
    $ git switch master          //將所在地移至master；此時會新增在分支下的檔案會被隱藏
    $ git merge dev              //將dev中的文件合併至master之中
    $ git log --graph --oneline --decorate --all
                                 //查看分支圖
    $ git branch -d dev          //刪除其分支(已完成合併)
    $ git branch -D dev          //刪除其分支(未完成合併，強制刪除)
   


==========others
    $ git ckechout master        //回復到原本主幹master 最後紀錄上
    $ git chekcout ID            //移動HEAD到指定的位置
        
///////////Github setup///////////
    sign up                      //申請個人帳號密碼，並完成驗證
    SSH keys                     //加入公鑰。settings\SSH and GPG keys\SSH keys(New SSH key)。貼上公鑰資訊

///////////GitKraken//////////////
    破解參考                      //https://github.com/qsshs/GitKraKen-Crack?tab=readme-ov-file
    使用參考                      //https://www.youtube.com/watch?v=ceT3pm5hYvs
 
    
   
    